@page "/DataGrid"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject ITicketsData _db

<h3>Ticket Aperti</h3>
@if (tickets is null)
{
    <p><em>Caricamento...</em></p>
}
else
{
    <RadzenDataGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    PageSize="5" AllowSorting="true" Data="@tickets" TItem="TicketModel" ColumnWidth="150px">
        <Columns>
            <RadzenGridColumn TItem="TicketModel" Property="Id" Title="Id"></RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="CreateTime" Title="Create time">
                <Template Context="data">
                    @String.Format("{0:d", data.CreateTime)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="Store" Title="Store"></RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="Description" Title="Description"></RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="Fault" Title="Fault"></RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="Caller" Title="Caller"></RadzenGridColumn>
            <RadzenGridColumn TItem="TicketModel" Property="CloseTime" Title="Close time">
                <Template Context="data">
                    @String.Format("{0:d", data.CloseTime)
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenDataGrid>
    foreach (var t in tickets)
    {
        <p>@t.Id</p>
    }
    <RadzenButton style="margin: 0 1rem 1rem 0; width: 200px" Icon="save" BusyText="Saving ..." Text="Save" />

}


@code {
    private IEnumerable<TicketModel> tickets;


    protected override async Task OnInitializedAsync()
    {
        tickets = await _db.GetTicket();
    }
}