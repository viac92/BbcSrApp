@page "/Ticket/{Id:int}"

@inject NavigationManager navigationManager
@inject ITicketsData _dbTicket
@inject IActivitiesData _dbActivitie
@inject ISitesData _dbSite
@inject ITicketNewData _dbTicketNew


@if (tickets is null || activities is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
<MudGrid Class="pa-5" Justify="Justify.Center">
    <MudItem xs="12">
        <MudPaper Class="pa-3 mb-5" Elevation="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@BacktoDashboard" StartIcon="@Icons.Filled.Dashboard">Torna alla dashboard</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@BackToTicket" StartIcon="@Icons.Filled.AddTask">Torna ai ticket</MudButton>
        </MudPaper>
        <MudPaper Class="pa-5" Elevation="3">
            <MudGrid>
                <MudItem xs="12">
                    @if (ticket.StatoTicket == "Aperto")
                    {
                    <MudAlert Severity="Severity.Error">Ticket n° @ticket.TicketId - Aperto</MudAlert>
                    }
                    else
                    {
                <MudAlert Severity="Severity.Success">Ticket n° @ticket.TicketId - Chiuso</MudAlert>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Apertura ticket: @String.Format("{0:d}", ticket.OpenTime)</MudText>
                </MudItem>
                <MudItem sm="12" xs="12">
                    <MudText Typo="Typo.h6">Store: @ticket.StoreName</MudText>
                </MudItem>
                <MudItem xs="12" Class="mt-5">
                    <MudText Typo="Typo.h6">Problema:</MudText>
                    <MudText Typo="Typo.h6">@ticket.Subject</MudText>
                </MudItem>
                <MudItem xs="12" Class="mt-5 mb-5">
                    <MudText Typo="Typo.h6">Descrizione:</MudText>
                    <MudText Typo="Typo.body1">
                    @ticket.Text
                    </MudText>
                </MudItem>

                <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start" Reverse="false">

                    @foreach (var activitie in activities)
                    {
                        @if (activitie.CloseTicket is true)
                        {
                            <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                <ItemContent>
                                    @if (activitie == activities.First())
                                    {
                                        <MudText Typo="Typo.h6" Class="ml-3">Ultima Attività</MudText>
                                    }
                                    <MudAlert Severity="Severity.Success">@activitie.Text</MudAlert>
                                </ItemContent>
                                <ItemOpposite>
                                    <MudText Color="Color.Success">13:37</MudText>
                                </ItemOpposite>
                            </MudTimelineItem>
                        }
                        else
                        {
                            <MudTimelineItem Color="Color.Warning" Variant="Variant.Filled">
                                <ItemContent>
                                    <MudAlert Severity="Severity.Warning">@activitie.Text</MudAlert>
                                </ItemContent>
                                <ItemOpposite>
                                    <MudText Color="Color.Warning">13:37</MudText>
                                </ItemOpposite>
                            </MudTimelineItem>
                        }
                    }
                </MudTimeline>
                <MudItem xs="12" Class="mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@BackToTicket" StartIcon="@Icons.Filled.AddTask">Torna ai ticket</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
}





@code {
    [Parameter]
    public int Id { get; set; }

    private IList<TicketNewModel> tickets;
    private TicketNewModel ticket;

    private IList<ActivitieModel> activities;

    protected override void OnParametersSet()
    {
        //the param will be set now
        var test = Id;
    }

    private void BackToTicket()
    {
        navigationManager.NavigateTo("/Ticket");
    }

    private void BacktoDashboard()
    {
        navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {

        tickets = await _dbTicketNew.GetNewTicketFromTicketId(Id);
        ticket = tickets[0];

        activities = await _dbActivitie.GetActiviteFromTicketId(Id);
    }
}
