@page "/"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Data.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ITicketsData _dbTicket
@inject ISitesData _dbSite
@inject IBrandsData _dbBrand


@if (tickets == null && sites == null && brands == null)
{
    <p><em>Caricamento...</em></p>
}
else
{
    @foreach (var ticket in tickets)
    {
        foreach (var site in sites)
        {
            if (userBrandId == site.BrandId)
            {
                if (ticket.CloseTime == DateTime.MinValue && ticket.Contact == null)
                {
                    ticketAperti++;
                }
                else if (ticket.CloseTime == DateTime.MinValue)
                {
                    ticketInLavorazione++;
                }
                else
                {
                    ticketChiusi++;
                }
            }
        }
    }
    @for (int i = 0; i < 3; i++)
    {
        situazioneTicket[0] = new TicketStatus { Stato = "Aperto", TotaleTicket = ticketAperti };
        situazioneTicket[1] = new TicketStatus { Stato = "In lavorazione", TotaleTicket = ticketInLavorazione };
        situazioneTicket[2] = new TicketStatus { Stato = "Chiuso", TotaleTicket = ticketChiusi };
    }
    <div class="col-12 mb-5">
        <h1><strong>Home : @userBrandName</strong></h1>
    </div>
    <div class="col-6 shadow p-3 mb-5 bg-body rounded">
        <h3>Ticket </h3>
        <RadzenChart>
            <RadzenDonutSeries Data="@situazioneTicket" CategoryProperty="Stato" ValueProperty="TotaleTicket">
                <TitleTemplate>
                    <div class="rz-donut-content">
                        <div>Ticket</div>
                        <div>Status</div>
                    </div>
                </TitleTemplate>
            </RadzenDonutSeries>
        </RadzenChart>
    </div>
}

@code {
    private IEnumerable<TicketModel> tickets;
    private IEnumerable<SiteModel> sites;
    private IEnumerable<BrandModel> brands;

    private int ticketAperti { get; set; }
    private int ticketInLavorazione { get; set; }
    private int ticketChiusi { get; set; }

    private int userBrandId { get; set; }
    private string userBrandName { get; set; }

    class TicketStatus
    {
        public string Stato { get; set; }
        public int TotaleTicket { get; set; }
    }

    TicketStatus[] situazioneTicket = new TicketStatus[3];


    protected override async Task OnInitializedAsync()
    {
        tickets = await _dbTicket.GetTicket();
        sites = await _dbSite.GetSite();
        brands = await _dbBrand.GetBrand();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        var user = await UserManager.FindByNameAsync(userState.Identity.Name);
        userBrandId = user.BrandId;
        userBrandName = user.UserName;
    }
}