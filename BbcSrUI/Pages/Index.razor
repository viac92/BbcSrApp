@page "/"
@page "/Dashboard"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Data.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavManager
@inject ITicketNewData _dbTicketNew
@inject ITicketApertiDateData _dbTicketAperti
@inject IBannerDate _dbBanner

@*mando Id ticket per il routing*@
@if (selectedItem1 is not null)
{
    NavManager.NavigateTo($"/Ticket/{selectedItem1.TicketId}");
}


@if (tickets is null || lastTenTickets is null || ticketAperti is null || ticketApertiMeseScorso is null || bannerItems is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
    //Dati totale ticket aperti grafico donout
    @foreach (var ticket in tickets)
    {
        if (ticket.StatoTicket == "Aperto")
        {
            //ticket aperti
            ticketSituazione[0]++;
        }
        else
        {
            //ticket chiusi
            ticketSituazione[1]++;
        }
    }

    //Inserisco dati grafico ultimo mese
    Series[0].Data[0] = Convert.ToDouble(ticketAperti[0].TrentaGiorni);
    Series[0].Data[1] = Convert.ToDouble(ticketAperti[0].VentiCinqueGiorni);
    Series[0].Data[2] = Convert.ToDouble(ticketAperti[0].VentiGiorni);
    Series[0].Data[3] = Convert.ToDouble(ticketAperti[0].QuindiciGiorni);
    Series[0].Data[4] = Convert.ToDouble(ticketAperti[0].DieciGiorni);
    Series[0].Data[5] = Convert.ToDouble(ticketAperti[0].CinqueGiorni);
    Series[0].Data[6] = Convert.ToDouble(ticketAperti[0].Oggi);

    //Inserisco dati
    Series[1].Data[0] = Convert.ToDouble(ticketApertiMeseScorso[0].TrentaGiorni);
    Series[1].Data[1] = Convert.ToDouble(ticketApertiMeseScorso[0].VentiCinqueGiorni);
    Series[1].Data[2] = Convert.ToDouble(ticketApertiMeseScorso[0].VentiGiorni);
    Series[1].Data[3] = Convert.ToDouble(ticketApertiMeseScorso[0].QuindiciGiorni);
    Series[1].Data[4] = Convert.ToDouble(ticketApertiMeseScorso[0].DieciGiorni);
    Series[1].Data[5] = Convert.ToDouble(ticketApertiMeseScorso[0].CinqueGiorni);
    Series[1].Data[6] = Convert.ToDouble(ticketApertiMeseScorso[0].Oggi);

<MudGrid Class="pa-5" Justify="Justify.Center">
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Andamento ticket ultimo mese</MudText>
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudPaper Elevation="3" Height="100%">
            <MudTable Items="@lastTenTickets" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" RowsPerPage="4" @bind-SelectedItem="selectedItem1" Height="100%" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Ultimi ticket</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Numero</MudTh>
                    <MudTh>Problema</MudTh>
                    <MudTh>Stato</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Numero Ticket">@context.TicketId</MudTd>
                    <MudTd DataLabel="Problema">@context.Subject</MudTd>
                    <MudTd DataLabel="Stato">
                        @if (context.StatoTicket == "Aperto")
                            {
                            <MudAlert Severity="Severity.Error">Aperto</MudAlert>
                            }
                            else
                            {
                            <MudAlert Severity="Severity.Success">Chiuso</MudAlert>
                            }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager RowsPerPageString="Righe per pagina" HideRowsPerPage="true"/>
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Resoconto ticket</MudText>
            <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Right" Width="250px" Height="250px"
                      InputData="@ticketSituazione" InputLabels="@tipoTicket">
            </MudChart>
        </MudPaper>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Servizio Help Desk</MudText>
            <MudText Typo="Typo.body1">
                Per aprire i ticket potete contattare direttamente i seguenti numeri o mandare un e-mail:
            </MudText>
            <MudLink Href="tel:+051270394" Typo="Typo.caption">Tel: 051270394</MudLink>
            <MudLink Href="tel:+3492356330" Typo="Typo.caption">Cell: 3492356330</MudLink>
            <MudLink Href="tel:+3492356332" Typo="Typo.caption"> 3492356332</MudLink>
            <MudLink Href="mailto:helpdesk@bbctech.it" Typo="Typo.caption">E-mail: helpdesk@bbctech.it</MudLink>
            <MudCarousel Class="mt-5" Style="height:200px;" ShowArrows="true" ShowDelimiters="false" AutoCycle="true" TData="object">
                @foreach(var bannerItem in bannerItems)
                 {
                    <MudCarouselItem Transition="Transition.Slide">
                        <div class="d-flex" style="height:100%">
                            <MudItem Class="my-auto mx-auto">
                                <img src="@bannerItem.SourceImage" alt="@bannerItem.Name" style="height:auto; width:200px" />
                            </MudItem>
                        </div>
                    </MudCarouselItem>
                 } 
            </MudCarousel>
        </MudPaper>
    </MudItem>
</MudGrid>
}

@code {
    //generali
    private int userBrandId { get; set; }
    public string userBrandName { get; set; }

    //Enum con dati ticket da server
    private IEnumerable<TicketNewModel> tickets;
    private IEnumerable<TicketNewModel> lastTenTickets;

    //scheda LineChart
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Ticket aperti", Data = new double[7]},
        new ChartSeries() { Name = "Ticket aperti mese scorso", Data = new double[7]}
    };
    public string[] XAxisLabels = { "1", "5", "10", "15", "20", "25", "30" };
    private ChartOptions options = new ChartOptions() { YAxisTicks = 1 };

    private IList<TicketApertiDateModel> ticketAperti;
    private IList<TicketApertiDateModel> ticketApertiMeseScorso;

    //scheda DonoutChart
    class TicketStatus
    {
        public string Stato { get; set; }
        public int TotaleTicket { get; set; }
    }

    TicketStatus[] situazioneTicket = new TicketStatus[2];
    private double[] ticketSituazione = new double[2];
    private string[] tipoTicket = { "aperto", "chiuso" };

    //scheda Tables
    private TicketNewModel selectedItem1;

    //Banner
    private IList<BannerModel> bannerItems;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        var user = await UserManager.FindByNameAsync(userState.Identity.Name);
        userBrandId = user.BrandId;
        userBrandName = user.UserName;

        tickets = await _dbTicketNew.GetNewTicket(userBrandId);
        lastTenTickets = await _dbTicketNew.GetNewTicketFromTicketIdLastTen(userBrandId);

        ticketAperti = await _dbTicketAperti.GetTicketApertiLastMonth(userBrandId);
        ticketApertiMeseScorso = await _dbTicketAperti.GetTicketApertiTwoMonth(userBrandId);

        bannerItems = await _dbBanner.GetBanner();
    }
}