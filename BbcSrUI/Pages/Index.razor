@page "/"
@page "/Dashboard"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Data.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ITicketsData _dbTicket
@inject ISitesData _dbSite
@inject IBrandsData _dbBrand


@if (tickets is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
    @foreach (var ticket in tickets)
     {

            if (ticket.CloseTime == DateTime.MinValue && ticket.Contact == null)
            {
                //ticket aperti
                ticketSituazione[0]++;
            }
            else if (ticket.CloseTime == DateTime.MinValue)
            {
                //ticket in lavorazione
                ticketSituazione[1]++;
            }
            else
            {
                //ticket chiusi
                ticketSituazione[2]++;
            }

     }
    @for (int i = 0; i < 3; i++)
     {
        situazioneTicket[0] = new TicketStatus { Stato = "Aperto", TotaleTicket = ticketAperti };
        situazioneTicket[1] = new TicketStatus { Stato = "In lavorazione", TotaleTicket = ticketInLavorazione };
        situazioneTicket[2] = new TicketStatus { Stato = "Chiuso", TotaleTicket = ticketChiusi };
     }
   
    <MudGrid  Class="pa-5" Justify="Justify.Center">
            <MudItem sm="6" xs="12">
                <MudPaper Class="pa-5" MinWidth="250px" Elevation="3">
                    <MudChart ChartType="ChartType.Pie" InputData="@ticketSituazione" @bind-SelectedIndex="indexSelezioneGrafico" InputLabels="@tipoTicket" Width="200px" Height="200px" />
                </MudPaper>
            </MudItem>
            <MudItem sm="6" xs="12">
                <MudPaper Class="pa-5" Elevation="3">Flex Item 1</MudPaper>
            </MudItem>
    </MudGrid>
}

@code {
    private IEnumerable<TicketModel> tickets;

    private double[] ticketSituazione = new double[3];
    private string[] tipoTicket = { "aperto", "lavorazione", "chiuso" };
    private int indexSelezioneGrafico = -1;

    private int ticketAperti { get; set; }
    private int ticketInLavorazione { get; set; }
    private int ticketChiusi { get; set; }

    private int userBrandId { get; set; }
    public string userBrandName { get; set; }

    class TicketStatus
    {
        public string Stato { get; set; }
        public int TotaleTicket { get; set; }
    }

    TicketStatus[] situazioneTicket = new TicketStatus[3];

    private List<int> UserSite = new List<int>();
    private IEnumerable<SiteModel> siteFromeBrand;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        var user = await UserManager.FindByNameAsync(userState.Identity.Name);
        userBrandId = user.BrandId;
        userBrandName = user.UserName;

        tickets = await _dbTicket.GetTicketFromBrandId(userBrandId);
    }
}