@page "/"
@page "/Dashboard"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Data.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavManager
@inject ITicketsData _dbTicket
@inject ISitesData _dbSite
@inject IBrandsData _dbBrand
@inject ITicketNewData _dbTicketNew

@*mando Id ticket per il routing*@
@if (selectedItem1 is not null)
{
    NavManager.NavigateTo($"/Ticket/{selectedItem1.TicketId}");
}


@if (tickets is null || ticketsLastMonth is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
    @foreach (var ticket in tickets)
    {

        if (ticket.StatoTicket == "Aperto")
        {
            //ticket aperti
            ticketSituazione[0]++;
        }
        else
        {
            //ticket chiusi
            ticketSituazione[1]++;
        }

    }
    @for (int i = 0; i < 2; i++)
    {
        situazioneTicket[0] = new TicketStatus { Stato = "Aperto", TotaleTicket = ticketAperti };
        situazioneTicket[1] = new TicketStatus { Stato = "Chiuso", TotaleTicket = ticketChiusi };
    }

<MudGrid Class="pa-5" Justify="Justify.Center">
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Andamento ticket ultimo mese</MudText>
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudTable Items="@ticketsLastMonth" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="3" RowsPerPage="4" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Ticket ultimo mese</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Numero</MudTh>
                <MudTh>Problema</MudTh>
                <MudTh>Stato</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Numero Ticket">@context.TicketId</MudTd>
                <MudTd DataLabel="Problema">@context.Subject</MudTd>
                <MudTd DataLabel="Stato">
                    @if (context.CloseTime == DateTime.MinValue && context.Contact == null)
                        {
                        <MudAlert Severity="Severity.Error">Aperto</MudAlert>
                        }
                        else
                        {
                        <MudAlert Severity="Severity.Success">Chiuso</MudAlert>
                        }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Resoconto ticket</MudText>
            <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Right" Width="250px" Height="250px"
                      InputData="@ticketSituazione" InputLabels="@tipoTicket">
            </MudChart>
        </MudPaper>
    </MudItem>
    <MudItem md="6" sm="12">
        <MudPaper Class="pa-5" Elevation="3" Height="100%">
            <MudText Typo="Typo.h6">Servizio Help Desk</MudText>
            <MudText Typo="Typo.body1">
                Per aprire i ticket potete contattare direttamente i seguenti numeri o mandare un e-mail:
            </MudText>
            <MudLink Href="tel:+051270394" Typo="Typo.caption">Tel: 051270394</MudLink>
            <MudLink Href="tel:+3492356330" Typo="Typo.caption">Cell: 3492356330</MudLink>
            <MudLink Href="tel:+3492356332" Typo="Typo.caption"> 3492356332</MudLink>
            <MudLink Href="mailto:helpdesk@bbctech.it" Typo="Typo.caption">E-mail: helpdesk@bbctech.it</MudLink>
            <MudCarousel Class="mt-5" Style="height:200px;" ShowArrows="true" ShowDelimiters="false" AutoCycle="true" TData="object">
                <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
                <MudCarouselItem Transition="Transition.Slide" Color="@Color.Secondary">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
                <MudCarouselItem Transition="Transition.Slide">
                    <div class="d-flex" style="height:100%">
                        <MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Primary" Size="@Size.Large" />
                    </div>
                </MudCarouselItem>
            </MudCarousel>
        </MudPaper>
    </MudItem>
</MudGrid>
}

@code {
    private IEnumerable<TicketNewModel> tickets;
    private IEnumerable<TicketModel> ticketsLastMonth;

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
    private ChartOptions options = new ChartOptions();

    private double[] ticketSituazione = new double[2];
    private string[] tipoTicket = { "aperto", "chiuso" };
    private int indesmelezioneGrafico = -1;

    private int ticketAperti { get; set; }
    private int ticketInLavorazione { get; set; }
    private int ticketChiusi { get; set; }

    private TicketModel selectedItem1;

    private int userBrandId { get; set; }
    public string userBrandName { get; set; }

    class TicketStatus
    {
        public string Stato { get; set; }
        public int TotaleTicket { get; set; }
    }

    TicketStatus[] situazioneTicket = new TicketStatus[2];

    private List<int> UserSite = new List<int>();
    private IEnumerable<SiteModel> siteFromeBrand;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        var user = await UserManager.FindByNameAsync(userState.Identity.Name);
        userBrandId = user.BrandId;
        userBrandName = user.UserName;

        tickets = await _dbTicketNew.GetNewTicket(userBrandId);
        ticketsLastMonth = await _dbTicket.GetTicketLastMonth(userBrandId);
    }
}