@page "/"
@page "/Dashboard"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Data.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavManager
@inject ITicketsData _dbTicket
@inject ISitesData _dbSite
@inject IBrandsData _dbBrand

@*mando Id ticket per il routing*@
@if (selectedItem1 is not null)
{
    NavManager.NavigateTo($"/Ticket/{selectedItem1.TicketId}");
}


@if (tickets is null || ticketsLastWeek is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
    @foreach (var ticket in tickets)
    {

        if (ticket.CloseTime == DateTime.MinValue && ticket.Contact == null)
        {
            //ticket aperti
            ticketSituazione[0]++;
        }
        else if (ticket.CloseTime == DateTime.MinValue)
        {
            //ticket in lavorazione
            ticketSituazione[1]++;
        }
        else
        {
            //ticket chiusi
            ticketSituazione[2]++;
        }

    }
    @for (int i = 0; i < 3; i++)
    {
        situazioneTicket[0] = new TicketStatus { Stato = "Aperto", TotaleTicket = ticketAperti };
        situazioneTicket[1] = new TicketStatus { Stato = "In lavorazione", TotaleTicket = ticketInLavorazione };
        situazioneTicket[2] = new TicketStatus { Stato = "Chiuso", TotaleTicket = ticketChiusi };
    }

<MudGrid Class="pa-5" Justify="Justify.Center">
    <MudItem sm="6" xs="12">
        <MudPaper Class="pa-5" Elevation="3">
            <MudText Typo="Typo.h6">Andamento ticket ultimo mese</MudText>
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
        </MudPaper>
    </MudItem>
    <MudItem sm="6" xs="12">
            <MudTable Items="@ticketsLastWeek" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="3" RowsPerPage="4" @bind-SelectedItem="selectedItem1">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Ticket utlimo mese</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Numero</MudTh>
                    <MudTh>Stato</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Numero Ticket">@context.TicketId</MudTd>
                    <MudTd DataLabel="Stato">
                        @if (context.CloseTime == DateTime.MinValue && context.Contact == null)
                            {
                            <MudAlert Severity="Severity.Error">Aperto</MudAlert>
                            }
                            else if (context.CloseTime == DateTime.MinValue)
                            {
                            <MudAlert Severity="Severity.Warning">In Lavorazione</MudAlert>
                            }
                            else
                            {
                            <MudAlert Severity="Severity.Success">Chiuso</MudAlert>
                            }
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
    </MudItem>
    <MudItem sm="6" xs="12">
        <MudPaper Class="pa-5" MinWidth="250px" Elevation="3">
            <MudText Typo="Typo.h6">Resoconto ticket</MudText>
            <MudChart ChartType="ChartType.Pie" InputData="@ticketSituazione" @bind-SelectedIndex="indexSelezioneGrafico" InputLabels="@tipoTicket" Width="200px" Height="200px" />
        </MudPaper>
    </MudItem>
    <MudItem sm="6" xs="12">
        <MudPaper Elevation="3"></MudPaper>
    </MudItem>
</MudGrid>
}

@code {
    private IEnumerable<TicketModel> tickets;
    private IEnumerable<TicketModel> ticketsLastWeek;

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
    private ChartOptions options = new ChartOptions();

    private double[] ticketSituazione = new double[3];
    private string[] tipoTicket = { "aperto", "lavorazione", "chiuso" };
    private int indexSelezioneGrafico = -1;

    private int ticketAperti { get; set; }
    private int ticketInLavorazione { get; set; }
    private int ticketChiusi { get; set; }

    private TicketModel selectedItem1;

    private int userBrandId { get; set; }
    public string userBrandName { get; set; }

    class TicketStatus
    {
        public string Stato { get; set; }
        public int TotaleTicket { get; set; }
    }

    TicketStatus[] situazioneTicket = new TicketStatus[3];

    private List<int> UserSite = new List<int>();
    private IEnumerable<SiteModel> siteFromeBrand;


    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        var user = await UserManager.FindByNameAsync(userState.Identity.Name);
        userBrandId = user.BrandId;
        userBrandName = user.UserName;

        tickets = await _dbTicket.GetTicketFromBrandId(userBrandId);
        ticketsLastWeek = await _dbTicket.GetTicketLastWeek(userBrandId);
    }
}