@page "/Ticket"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> UserManager
@inject ITicketsData _dbTicket
@inject ISitesData _dbSite


@*mando Id ticket per il routing*@
@if (selectedItem1 is not null)
{
    NavManager.NavigateTo($"/Ticket/{selectedItem1.TicketId}");
}


@if (tickets is null || storeFromTicket is null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem Class="mt-5">
            <MudProgressCircular Class="mx-auto" Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudTable Items="@tickets" Class="pa-4" Filter="new Func<TicketModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Hover="true" FixedHeader="true" FixedFooter="true" SortLabel="Sort By">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Ticket</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Cerca" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<TicketModel, object>(x =>x.SiteId)">Id</MudTableSortLabel></MudTh>
            <MudTh>Stato</MudTh>
            <MudTh>Data Apertura</MudTh>
            <MudTh>Store</MudTh>
            <MudTh>Problema</MudTh>
            <MudTh>Operatore</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.TicketId</MudTd>
            <MudTd DataLabel="Stato">
                @if (context.CloseTime == DateTime.MinValue && context.Contact == null)
                    {
                    <MudAlert Severity="Severity.Error">Aperto</MudAlert>
                    }
                    else if (context.CloseTime == DateTime.MinValue)
                    {
                    <MudAlert Severity="Severity.Warning">In Lavorazione</MudAlert>
                    }
                    else
                    {
                    <MudAlert Severity="Severity.Success">Chiuso</MudAlert>
                    }
            </MudTd>
                <MudTd DataLabel="Data Apertura">@String.Format("{0:d}", context.OpenTime)</MudTd>
                <MudTd DataLabel="Store">@storeFromTicket[0].Name</MudTd>
                <MudTd DataLabel="Problema">@context.Subject</MudTd>
                <MudTd DataLabel="Caller">@context.Contact</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>   
}


@code {
    private IEnumerable<TicketModel> tickets;

    private string searchString1 = "";
    private TicketModel selectedItem1 = null;
    private List<SiteModel> storeFromTicket = null;

    private bool FilterFunc1(TicketModel ticket) => FilterFunc(ticket, searchString1);

    private bool FilterFunc(TicketModel ticket, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ticket.Text.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ticket.Subject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ticket.Contact is not null && ticket.Contact.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{ticket.TicketId} {ticket.SiteId}".Contains(searchString))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;
        var user = await UserManager.FindByNameAsync(userState.Identity.Name);

        tickets = await _dbTicket.GetTicketFromBrandId(user.BrandId);
        storeFromTicket = await _dbSite.GetSiteFormSiteId(tickets.First().SiteId);
    }
}